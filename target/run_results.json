{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2025.8.5+56e45b2", "generated_at": "2025-08-05T22:13:40.964749Z", "invocation_id": "0d04c336-2f0c-4961-9bad-23c6c24e6e95", "invocation_started_at": "2025-08-05T22:13:39.003051Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T22:13:40.239606Z", "completed_at": "2025-08-05T22:13:40.245577Z"}, {"name": "execute", "started_at": "2025-08-05T22:13:40.246035Z", "completed_at": "2025-08-05T22:13:40.806538Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5686264038085938, "adapter_response": {"_message": "SELECT 44", "code": "SELECT", "rows_affected": 44}, "message": "SELECT 44", "failures": null, "unique_id": "model.my_project.metrics_monthly", "compiled": true, "compiled_code": "\n\nwith date_vector as (\n    select\n        month_start::date as month_start,\n        (month_start + interval '1 month - 1 day')::date as month_end,\n        extract(month from month_start)::int as month\n    from\n        generate_series('2022-01-01'::date, current_date + interval '2 months', interval '1 month') as month_start\n), \n\nexercise_metrics as (\n    select\n        date_trunc('month', el.\"Date\") exercise_month,\n        count(distinct el.\"Date\") total_workouts,\n        count(case when el.\"Exercise Label\" = 'Treadmill' then 1 end) total_runs,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Distance (mi)\" end) total_miles,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Calories\" end) total_calories,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Duration (min)\" end) total_minutes,\n        sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Reps\" end) total_reps,\n        sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Sets\" end) total_sets\n    from\n        public.exercise_log as el\n    group by\n        exercise_month\n),\n\nweight_metrics as (\n    select\n        date_trunc('month', w.\"Measurement Date\") weight_month,\n        count(*) total_weight_measurements,\n        avg(w.\"Weight\") average_weight\n    from\n        public.weights as w\n    group by\n        weight_month\n),\n\nrecipe_metrics as (\n    with dish_flags as (\n        select\n            rl.\"Date\"::date as recipe_date,\n            rl.\"Dish\",\n            case\n                when rl.\"Date\" = first_value(rl.\"Date\") over (partition by rl.\"Dish\" order by rl.\"Date\")\n                then 'New'\n                else 'Repeat'\n            end as dish_type\n        from public.recipe_log rl\n    )\n    select\n        date_trunc('month', recipe_date) as recipe_month,\n        count(*) as total_dishes,\n        count(*) filter (where dish_type = 'New') as total_new_dishes,\n        count(*) filter (where dish_type = 'Repeat') as total_repeat_dishes,\n        sum(rl.\"Cost\") as total_cost\n    from\n        dish_flags df\n    join public.recipe_log rl on\n        rl.\"Date\" = df.recipe_date and rl.\"Dish\" = df.\"Dish\"\n    group by\n        recipe_month\n),\n\nrecipe_flattened_metrics as (\n    select\n        date_trunc('month', rlf.\"Date\") recipe_month,\n        count(distinct rlf.\"Plant\") total_unique_plants\n    from\n         \"postgres\".\"public\".\"recipe_log_flattened\" as rlf\n    group by\n        recipe_month\n),\n\nshopping_metrics as (\n    select\n        date_trunc('month', sl.\"Date\") shopping_month,\n        count(distinct sl.\"Ingredient\") unique_ingredients_purchased,\n        sum(sl.\"Quantity\") total_ingredients_purchased,\n        sum(sl.\"Price\") total_ingredients_spend\n    from\n        public.shopping_log as sl\n    group by\n        shopping_month\n)\n\nselect\n    dv.month_start,\n    dv.month_end,\n    dv.month,\n\n    -- Exercise Metrics\n    em.total_workouts,\n    em.total_runs,\n    em.total_miles,\n    em.total_calories,\n    em.total_minutes,\n    em.total_reps,\n    em.total_sets,\n    \n    -- Weight Metrics\n    wm.total_weight_measurements,\n    wm.average_weight,\n\n    -- Recipe Metrics\n    rm.total_dishes,\n    rm.total_new_dishes,\n    rm.total_repeat_dishes,\n    rm.total_cost,\n\n    -- Recipe Metrics (flattened)\n    rfm.total_unique_plants,\n\n    -- Shopping Log Metrics\n    sm.unique_ingredients_purchased,\n    sm.total_ingredients_purchased,\n    sm.total_ingredients_spend\n\nfrom\n    date_vector as dv\nleft join exercise_metrics em on\n    dv.month_start = em.exercise_month\nleft join weight_metrics wm on\n    dv.month_start = wm.weight_month\nleft join recipe_metrics rm on\n    dv.month_start = rm.recipe_month\nleft join recipe_flattened_metrics rfm on\n    dv.month_start = rfm.recipe_month\nleft join shopping_metrics sm on\n    dv.month_start = sm.shopping_month\nwhere\n    dv.month_start <= current_date", "relation_name": "\"postgres\".\"public\".\"metrics_monthly\"", "batch_results": null}], "elapsed_time": 1.2317702770233154, "args": {"send_anonymous_usage_stats": true, "require_generic_test_arguments_property": false, "vars": {}, "upload_to_artifacts_ingest_api": false, "empty": false, "partial_parse_file_diff": true, "partial_parse": true, "which": "build", "require_batched_execution_for_custom_microbatch_strategy": false, "quiet": false, "exclude": [], "use_fast_test_edges": false, "use_colors": true, "vortex_event_forwarding_enabled": false, "log_path": "logs", "invocation_command": "dbt ", "state_modified_compare_more_unrendered_values": false, "skip_nodes_if_on_run_start_fails": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "skip_write_msgpack_if_exist": false, "resource_types": [], "include_saved_query": false, "use_colors_file": true, "static_parser": true, "printer_width": 80, "profiles_dir": "./", "require_all_warnings_handled_by_warn_error": false, "log_format_file": "json", "introspect": true, "strict_mode": false, "show_resource_report": false, "log_level_file": "debug", "select": ["metrics_monthly"], "show_all_deprecations": false, "show": false, "favor_state": false, "require_resource_names_without_spaces": true, "state_modified_compare_vars": false, "defer": false, "log_format": "json", "log_level": "debug", "target_path": "target", "indirect_selection": "eager", "cache_selected_only": false, "write_json": true, "project_dir": "/app/dbt_project/77b8123b-953a-42a7-a44e-0486d4e8d7fe", "skip_semantic_layer": false, "source_freshness_run_project_hooks": true, "exclude_resource_types": [], "print": true, "macro_debugging": false, "require_nested_cumulative_type_params": false, "version_check": true, "require_yaml_configuration_for_mf_time_spines": false, "profile": "user", "log_file_max_bytes": 0, "require_explicit_package_overrides_for_builtin_materializations": true, "export_saved_queries": false, "validate_macro_args": false, "populate_cache": true}}