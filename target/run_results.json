{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2025.7.29+3de59e7", "generated_at": "2025-08-05T18:32:24.824775Z", "invocation_id": "45ca6f24-c3ac-4508-ba3e-d5aa1430c20c", "invocation_started_at": "2025-08-05T18:32:23.194121Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T18:32:24.393540Z", "completed_at": "2025-08-05T18:32:24.399556Z"}, {"name": "execute", "started_at": "2025-08-05T18:32:24.400038Z", "completed_at": "2025-08-05T18:32:24.680026Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2882862091064453, "adapter_response": {"_message": "SELECT 188", "code": "SELECT", "rows_affected": 188}, "message": "SELECT 188", "failures": null, "unique_id": "model.my_project.metrics_weekly", "compiled": true, "compiled_code": "\n\nwith date_vector as (\n    select\n        week_start::date AS week_start,\n        (week_start + interval '6 days')::date AS week_end,\n        EXTRACT(week FROM week_start)::int AS week\n    from\n        generate_series('2022-01-03'::date, current_date + interval '30 days', interval '1 week') AS week_start\n), \n\nexercise_metrics as (\n    select\n        date_trunc('week', el.\"Date\") exercise_week\n        , count(distinct el.\"Date\") total_workouts\n        , count(case when el.\"Exercise Label\" = 'Treadmill' then 1 end) total_runs\n        , sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Distance (mi)\" end) total_miles\n        , sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Calories\" end) total_calories\n        , sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Duration (min)\" end) total_minutes\n        , sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Reps\" end) total_reps\n        , sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Sets\" end) total_sets\n    from\n        public.exercise_log as el\n    group by\n        exercise_week\n)\n\n, weight_metrics as (\n    select\n        date_trunc('week', w.\"Measurement Date\") weight_week\n        , count(*) total_weight_measurements\n        , avg(w.\"Weight\") average_weight\n    from\n        public.weights as w\n    group by\n        weight_week\n)\n\n, recipe_metrics as (\n    with dish_flags as (\n        select\n            rl.\"Date\"::date as recipe_date,\n            rl.\"Dish\",\n            case\n                when rl.\"Date\" = first_value(rl.\"Date\") over (partition by rl.\"Dish\" order by rl.\"Date\")\n                then 'New'\n                else 'Repeat'\n            end as dish_type\n        from public.recipe_log rl\n    )\n    select\n        date_trunc('week', recipe_date) as recipe_week,\n        count(*) as total_dishes,\n        count(*) filter (where dish_type = 'New') as total_new_dishes,\n        count(*) filter (where dish_type = 'Repeat') as total_repeat_dishes,\n        sum(rl.\"Cost\") as total_cost\n    from\n        dish_flags df\n    join public.recipe_log rl on\n        rl.\"Date\" = df.recipe_date and rl.\"Dish\" = df.\"Dish\"\n    group by\n        recipe_week\n)\n\n, recipe_flattened_metrics as (\n    select\n        date_trunc('week', rlf.\"Date\") recipe_week\n        , count(distinct rlf.\"Plant\") total_unique_plants\n    from\n        public.recipe_log_flattened as rlf\n    group by\n        recipe_week\n)\n\n, shopping_metrics as (\n    select\n        date_trunc('week', sl.\"Date\") shopping_week\n        , count(distinct sl.\"Ingredient\") unique_ingredients_purchased\n        , sum(sl.\"Quantity\") total_ingredients_purchased\n        , sum(sl.\"Price\") total_ingredients_spend\n    from\n        public.shopping_log as sl\n    group by\n        shopping_week\n)\n\nselect\n    dv.week_start\n    , dv.week_end\n    , dv.week\n\n    -- Execise Metrics\n    , em.total_workouts\n    , em.total_runs\n    , em.total_miles\n    , em.total_calories\n    , em.total_minutes\n    , em.total_reps\n    , em.total_sets\n    \n    -- Weight Metrics\n    , wm.total_weight_measurements\n    , wm.average_weight\n\n    -- Recipe Metrics\n    , rm.total_dishes\n    , rm.total_new_dishes\n    , rm.total_repeat_dishes\n    , rm.total_cost\n\n    -- Recipe Metrics (flattened)\n    , rfm.total_unique_plants\n\n    -- Shopping Log Metrics\n    , sm.unique_ingredients_purchased\n    , sm.total_ingredients_purchased\n    , sm.total_ingredients_spend\nfrom\n    date_vector as dv\nleft join exercise_metrics em on\n    dv.week_start = em.exercise_week\nleft join weight_metrics wm on\n    dv.week_start = wm.weight_week\nleft join recipe_metrics rm on\n    dv.week_start = rm.recipe_week\nleft join recipe_flattened_metrics rfm on\n    dv.week_start = rfm.recipe_week\nleft join shopping_metrics sm on\n    dv.week_start = sm.shopping_week\nwhere\n    week_start <= current_date", "relation_name": "\"postgres\".\"public\".\"metrics_weekly\"", "batch_results": null}], "elapsed_time": 0.9729039669036865, "args": {"log_path": "logs", "upload_to_artifacts_ingest_api": false, "strict_mode": false, "require_explicit_package_overrides_for_builtin_materializations": true, "log_file_max_bytes": 0, "quiet": false, "vortex_event_forwarding_enabled": false, "cache_selected_only": false, "show_resource_report": false, "require_resource_names_without_spaces": true, "resource_types": [], "profile": "user", "introspect": true, "use_colors_file": true, "show_all_deprecations": false, "use_colors": true, "exclude_resource_types": [], "empty": false, "export_saved_queries": false, "state_modified_compare_more_unrendered_values": false, "print": true, "validate_macro_args": false, "skip_write_msgpack_if_exist": false, "include_saved_query": false, "project_dir": "/app/dbt_project/152eee58-39c9-46b0-b1de-ad7d186642b9", "invocation_command": "dbt ", "require_nested_cumulative_type_params": false, "log_format_file": "json", "log_level_file": "debug", "vars": {}, "require_generic_test_arguments_property": false, "log_format": "json", "partial_parse": true, "log_level": "debug", "select": ["metrics_weekly"], "send_anonymous_usage_stats": true, "require_all_warnings_handled_by_warn_error": false, "skip_nodes_if_on_run_start_fails": false, "write_json": true, "macro_debugging": false, "state_modified_compare_vars": false, "defer": false, "favor_state": false, "which": "build", "profiles_dir": "./", "printer_width": 80, "exclude": [], "version_check": true, "show": false, "skip_semantic_layer": false, "target_path": "target", "use_fast_test_edges": false, "static_parser": true, "indirect_selection": "eager", "require_yaml_configuration_for_mf_time_spines": false, "require_batched_execution_for_custom_microbatch_strategy": false, "populate_cache": true, "warn_error_options": {"error": [], "warn": [], "silence": []}, "partial_parse_file_diff": true, "source_freshness_run_project_hooks": true}}