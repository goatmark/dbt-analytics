{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "2025.7.29+3de59e7", "generated_at": "2025-08-05T18:33:32.994560Z", "invocation_id": "becc0d09-8120-470f-9ba5-5ad888225ee4", "invocation_started_at": "2025-08-05T18:33:30.907254Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-05T18:33:32.518922Z", "completed_at": "2025-08-05T18:33:32.525820Z"}, {"name": "execute", "started_at": "2025-08-05T18:33:32.526469Z", "completed_at": "2025-08-05T18:33:32.836135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.31985950469970703, "adapter_response": {"_message": "SELECT 15", "code": "SELECT", "rows_affected": 15}, "message": "SELECT 15", "failures": null, "unique_id": "model.my_project.metrics_quarterly", "compiled": true, "compiled_code": "\n\nwith date_vector as (\n    select\n        quarter_start::date as quarter_start,\n        (quarter_start + interval '3 months - 1 day')::date as quarter_end,\n        extract(quarter from quarter_start)::int as quarter\n    from\n        generate_series('2022-01-01'::date, current_date + interval '6 months', interval '3 months') as quarter_start\n),\n\nexercise_metrics as (\n    select\n        date_trunc('quarter', el.\"Date\") exercise_quarter,\n        count(distinct el.\"Date\") total_workouts,\n        count(case when el.\"Exercise Label\" = 'Treadmill' then 1 end) total_runs,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Distance (mi)\" end) total_miles,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Calories\" end) total_calories,\n        sum(case when el.\"Exercise Label\" = 'Treadmill' then el.\"Duration (min)\" end) total_minutes,\n        sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Reps\" end) total_reps,\n        sum(case when el.\"Type\" in ('Weights', 'Calisthenics') then el.\"Sets\" end) total_sets\n    from\n        public.exercise_log as el\n    group by\n        exercise_quarter\n),\n\nweight_metrics as (\n    select\n        date_trunc('quarter', w.\"Measurement Date\") weight_quarter,\n        count(*) total_weight_measurements,\n        avg(w.\"Weight\") average_weight\n    from\n        public.weights as w\n    group by\n        weight_quarter\n),\n\nrecipe_metrics as (\n    with dish_flags as (\n        select\n            rl.\"Date\"::date as recipe_date,\n            rl.\"Dish\",\n            case\n                when rl.\"Date\" = first_value(rl.\"Date\") over (partition by rl.\"Dish\" order by rl.\"Date\")\n                then 'New'\n                else 'Repeat'\n            end as dish_type\n        from public.recipe_log rl\n    )\n    select\n        date_trunc('quarter', recipe_date) as recipe_quarter,\n        count(*) as total_dishes,\n        count(*) filter (where dish_type = 'New') as total_new_dishes,\n        count(*) filter (where dish_type = 'Repeat') as total_repeat_dishes,\n        sum(rl.\"Cost\") as total_cost\n    from\n        dish_flags df\n    join public.recipe_log rl on\n        rl.\"Date\" = df.recipe_date and rl.\"Dish\" = df.\"Dish\"\n    group by\n        recipe_quarter\n),\n\nrecipe_flattened_metrics as (\n    select\n        date_trunc('quarter', rlf.\"Date\") recipe_quarter,\n        count(distinct rlf.\"Plant\") total_unique_plants\n    from\n        public.recipe_log_flattened as rlf\n    group by\n        recipe_quarter\n),\n\nshopping_metrics as (\n    select\n        date_trunc('quarter', sl.\"Date\") shopping_quarter,\n        count(distinct sl.\"Ingredient\") unique_ingredients_purchased,\n        sum(sl.\"Quantity\") total_ingredients_purchased,\n        sum(sl.\"Price\") total_ingredients_spend\n    from\n        public.shopping_log as sl\n    group by\n        shopping_quarter\n)\n\nselect\n    dv.quarter_start,\n    dv.quarter_end,\n    dv.quarter,\n\n    -- Exercise Metrics\n    em.total_workouts,\n    em.total_runs,\n    em.total_miles,\n    em.total_calories,\n    em.total_minutes,\n    em.total_reps,\n    em.total_sets,\n    \n    -- Weight Metrics\n    wm.total_weight_measurements,\n    wm.average_weight,\n\n    -- Recipe Metrics\n    rm.total_dishes,\n    rm.total_new_dishes,\n    rm.total_repeat_dishes,\n    rm.total_cost,\n\n    -- Recipe Metrics (flattened)\n    rfm.total_unique_plants,\n\n    -- Shopping Log Metrics\n    sm.unique_ingredients_purchased,\n    sm.total_ingredients_purchased,\n    sm.total_ingredients_spend\n\nfrom\n    date_vector as dv\nleft join exercise_metrics em on\n    dv.quarter_start = em.exercise_quarter\nleft join weight_metrics wm on\n    dv.quarter_start = wm.weight_quarter\nleft join recipe_metrics rm on\n    dv.quarter_start = rm.recipe_quarter\nleft join recipe_flattened_metrics rfm on\n    dv.quarter_start = rfm.recipe_quarter\nleft join shopping_metrics sm on\n    dv.quarter_start = sm.shopping_quarter\nwhere\n    dv.quarter_start <= current_date", "relation_name": "\"postgres\".\"public\".\"metrics_quarterly\"", "batch_results": null}], "elapsed_time": 1.2576119899749756, "args": {"vars": {}, "cache_selected_only": false, "introspect": true, "skip_nodes_if_on_run_start_fails": false, "indirect_selection": "eager", "include_saved_query": false, "log_level_file": "debug", "print": true, "require_yaml_configuration_for_mf_time_spines": false, "defer": false, "require_all_warnings_handled_by_warn_error": false, "target_path": "target", "resource_types": [], "require_explicit_package_overrides_for_builtin_materializations": true, "skip_semantic_layer": false, "log_format_file": "json", "project_dir": "/app/dbt_project/ebe7eeda-c3cf-4787-bddd-68cc30b2facc", "exclude_resource_types": [], "log_format": "json", "empty": false, "log_file_max_bytes": 0, "use_colors": true, "static_parser": true, "favor_state": false, "export_saved_queries": false, "require_batched_execution_for_custom_microbatch_strategy": false, "quiet": false, "log_path": "logs", "require_resource_names_without_spaces": true, "validate_macro_args": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "use_fast_test_edges": false, "log_level": "debug", "profile": "user", "printer_width": 80, "populate_cache": true, "show_resource_report": false, "state_modified_compare_vars": false, "strict_mode": false, "upload_to_artifacts_ingest_api": false, "send_anonymous_usage_stats": true, "state_modified_compare_more_unrendered_values": false, "use_colors_file": true, "require_generic_test_arguments_property": false, "partial_parse_file_diff": true, "partial_parse": true, "vortex_event_forwarding_enabled": false, "which": "build", "macro_debugging": false, "exclude": [], "require_nested_cumulative_type_params": false, "skip_write_msgpack_if_exist": false, "select": ["metrics_quarterly"], "version_check": true, "invocation_command": "dbt ", "write_json": true, "source_freshness_run_project_hooks": true, "show_all_deprecations": false, "show": false, "profiles_dir": "./"}}